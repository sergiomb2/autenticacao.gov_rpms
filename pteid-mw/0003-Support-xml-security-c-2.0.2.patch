From 6e8c3def7ccace5a4c4cbdcc42155987695e8b90 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=A9rgio=20M=2E=20Basto?= <sergio@serjux.com>
Date: Sat, 16 Nov 2019 04:20:51 +0000
Subject: [PATCH 3/5] Support-xml-security-c-2.0.2

but needs fixes in xml-security-c-2.0.2
https://github.com/apache/santuario-cpp/pull/5
---
 pteid-mw-pt/_src/eidmw/applayer/XadesSignature.cpp | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/pteid-mw-pt/_src/eidmw/applayer/XadesSignature.cpp b/pteid-mw-pt/_src/eidmw/applayer/XadesSignature.cpp
index 5413a2a6..02853816 100644
--- a/pteid-mw-pt/_src/eidmw/applayer/XadesSignature.cpp
+++ b/pteid-mw-pt/_src/eidmw/applayer/XadesSignature.cpp
@@ -542,7 +542,7 @@ int XadesSignature::HashSignedInfoNode(XERCES_NS DOMDocument *doc, XMLByte *hash
 
     string c14n;
     unsigned char buffer[1024];
-    xsecsize_t bytes = 0;
+    XMLSize_t bytes = 0;
     while((bytes = canonicalizer.outputBuffer(buffer, 1024)) > 0)
     {
         c14n.append( (char*)&buffer[0], size_t(bytes));
@@ -597,7 +597,7 @@ int XadesSignature::HashSignedPropertiesNode(XERCES_NS DOMDocument *doc, XMLByte
 
     string c14n;
     unsigned char buffer[1024];
-    xsecsize_t bytes = 0;
+    XMLSize_t bytes = 0;
     while((bytes = canonicalizer.outputBuffer(buffer, 1024)) > 0)
     {
         c14n.append( (char*)&buffer[0], size_t(bytes));
@@ -862,7 +862,7 @@ std::string canonicalNode(DOMNode *node, XERCES_NS DOMDocument *doc)
 
     string c14n;
     unsigned char buffer[1024];
-    xsecsize_t bytes = 0;
+    XMLSize_t bytes = 0;
     while((bytes = canonicalizer.outputBuffer(buffer, 1024)) > 0)
     {
         c14n.append((char*)&buffer[0], size_t(bytes));
@@ -1146,7 +1146,8 @@ CByteArray &XadesSignature::Sign(const char ** paths, unsigned int n_paths)
 		//sig->setDSIGNSPrefix(MAKE_UNICODE_STRING("ds"));
 
 		// Use it to create a blank signature DOM structure from the doc
-		sigNode = sig->createBlankSignature(doc, CANON_C14NE_NOC, SIGNATURE_RSA, HASH_SHA256);
+/* 		sigNode = sig->createBlankSignature(doc, CANON_C14NE_NOC, SIGNATURE_RSA, HASH_SHA256); */
+        sigNode = sig->createBlankSignature(doc, DSIGConstants::s_unicodeStrURIC14N_NOC, DSIGConstants::s_unicodeStrURIHMAC_SHA256);
 
 		//Add Id attribute to signature
 		//signature_id = (XMLCh*)generateNodeID().c_str();
@@ -1168,7 +1169,7 @@ CByteArray &XadesSignature::Sign(const char ** paths, unsigned int n_paths)
 		{
 			const char * path = unique_paths[i]->c_str();
 			//Create a reference to the external file
-			DSIGReference * ref = sig->createReference(createURI(path), HASH_SHA256);
+			DSIGReference * ref = sig->createReference(createURI(path), DSIGConstants::s_unicodeStrURIHMAC_SHA256);
 			MWLOG(LEV_DEBUG, MOD_APL, "SignXades(): Hashing file %s", path);
                 sha1_hash = HashFile(paths[i]);
 
@@ -1193,7 +1194,7 @@ CByteArray &XadesSignature::Sign(const char ** paths, unsigned int n_paths)
 
 		HashSignedPropertiesNode(sig->getParentDocument(), sha1_hash_signed_props);
 
-		DSIGReference * ref_signed_props = sig->createReference(createSignedPropertiesURI().c_str(), HASH_SHA256);
+		DSIGReference * ref_signed_props = sig->createReference(createSignedPropertiesURI().c_str(), DSIGConstants::s_unicodeStrURIHMAC_SHA256);
 		ref_signed_props->setType(XMLString::transcode("http://uri.etsi.org/01903#SignedProperties"));
 
 		setReferenceHash(sha1_hash_signed_props, SHA256_LEN, references_count, doc);
-- 
2.21.0

